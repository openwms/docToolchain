buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'
    }
}

//tag::exportGithubIssues[]
task exportGithubIssues(
        description: 'Exports all Github issues sorted by status into multiple files',
        group: 'docToolchain'
) {
    doLast {
        def configFile = new File(docDir, mainConfigFile)
        def config = new ConfigSlurper().parse(configFile.text)

        def user = config.github.user
        def pass = config.github.password
        if (!pass) {
            pass = System.console().readPassword("Github password (or API token) for user '$user': ")
        }
        def organization = config.github.organization
        def repository = config.github.repository
        def gitHubRoot = config.github.root
        def authHeader = "${user}:${pass}".bytes.encodeBase64().toString()
        def resultsPerPage = config.github.resultsPerPage ? config.github.resultsPerPage : 100

        def gitHub = new groovyx.net.http.RESTClient(gitHubRoot)
        gitHub.encoderRegistry = new groovyx.net.http.EncoderRegistry(charset: 'utf-8')
        gitHub.handler.failure = { resp, data -> resp.setData(data); return resp }
        def headers = [
                'Authorization': "Basic " + authHeader,
                'Content-Type' : 'application/json; charset=utf-8',
                'User-Agent' : user
        ]
        def allIssues = new File(srcDir, 'src/allGitHubIssues.adoc')
        allIssues.write("", 'utf-8')
        def openIssues = new File(srcDir, 'src/openGitHubIssues.adoc')
        openIssues.write("", 'utf-8')
        def oiExist = false;
        def closedIssues = new File(srcDir, 'src/closedGitHubIssues.adoc')
        closedIssues.write("", 'utf-8')
        def ciExist = false;

        gitHub.get(
            path: "repos/${organization}/${repository}/issues",
            query: ['state':'all','filter':'all','per_page': "${resultsPerPage}"],
            headers: headers
        ).data.each { 
            if (!it.html_url.contains("/pull/")) {
                if ("open".equals(it.state)) {
                    openIssues.append("| ${'https://www.github.com/'+organization+'/'+repository+'/issues/' + it.number}[${it.number}]", 'utf-8')
                    openIssues.append(it.milestone == null ? "| n/a": "| ${it.milestone.title}", 'utf-8')
                    openIssues.append("| ${it.title.take(120)}", 'utf-8')
                    oiExist = true
                } else {
                    closedIssues.append("| ${'https://www.github.com/'+organization+'/'+repository+'/issues/' + it.number}[${it.number}]", 'utf-8')
                    closedIssues.append("| ${it.state}", 'utf-8')
                    closedIssues.append(it.milestone == null ? "| n/a" : "| ${it.milestone.title}", 'utf-8')
                    closedIssues.append("| ${it.title.take(120)}", 'utf-8')
                    ciExist = true
                }
                allIssues.append("| ${'https://www.github.com/'+organization+'/'+repository+'/issues/' + it.number}[${it.number}]", 'utf-8')
                allIssues.append("| ${it.state}", 'utf-8')
                allIssues.append(it.milestone == null ? "| n/a" : "| ${it.milestone.title}", 'utf-8')
                allIssues.append("| ${it.title.take(120)}", 'utf-8')
            }
        }
        if (!oiExist) {
            openIssues.append("| | |", 'utf-8')
        }
        if (!ciExist) {
            openIssues.append("| | |", 'utf-8')
        }
    }
}
//end::exportGithubIssues[]
